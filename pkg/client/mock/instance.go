// SPDX-License-Identifier: MIT
// Code generated by MockGen. DO NOT EDIT.
// Source: ../instance.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=instance.go -source=../instance.go Instance
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	instances "github.com/cloudbase/garm/client/instances"
	gomock "go.uber.org/mock/gomock"
)

// MockInstanceClient is a mock of InstanceClient interface.
type MockInstanceClient struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceClientMockRecorder
}

// MockInstanceClientMockRecorder is the mock recorder for MockInstanceClient.
type MockInstanceClientMockRecorder struct {
	mock *MockInstanceClient
}

// NewMockInstanceClient creates a new mock instance.
func NewMockInstanceClient(ctrl *gomock.Controller) *MockInstanceClient {
	mock := &MockInstanceClient{ctrl: ctrl}
	mock.recorder = &MockInstanceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceClient) EXPECT() *MockInstanceClientMockRecorder {
	return m.recorder
}

// DeleteInstance mocks base method.
func (m *MockInstanceClient) DeleteInstance(params *instances.DeleteInstanceParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockInstanceClientMockRecorder) DeleteInstance(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceClient)(nil).DeleteInstance), params)
}

// GetInstance mocks base method.
func (m *MockInstanceClient) GetInstance(params *instances.GetInstanceParams) (*instances.GetInstanceOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", params)
	ret0, _ := ret[0].(*instances.GetInstanceOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockInstanceClientMockRecorder) GetInstance(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceClient)(nil).GetInstance), params)
}

// ListInstances mocks base method.
func (m *MockInstanceClient) ListInstances(params *instances.ListInstancesParams) (*instances.ListInstancesOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", params)
	ret0, _ := ret[0].(*instances.ListInstancesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances.
func (mr *MockInstanceClientMockRecorder) ListInstances(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockInstanceClient)(nil).ListInstances), params)
}

// ListPoolInstances mocks base method.
func (m *MockInstanceClient) ListPoolInstances(params *instances.ListPoolInstancesParams) (*instances.ListPoolInstancesOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPoolInstances", params)
	ret0, _ := ret[0].(*instances.ListPoolInstancesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPoolInstances indicates an expected call of ListPoolInstances.
func (mr *MockInstanceClientMockRecorder) ListPoolInstances(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPoolInstances", reflect.TypeOf((*MockInstanceClient)(nil).ListPoolInstances), params)
}

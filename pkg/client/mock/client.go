// SPDX-License-Identifier: MIT
// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=client.go -source=../client.go GarmClient
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	client "github.com/cloudbase/garm/client"
	runtime "github.com/go-openapi/runtime"
	gomock "go.uber.org/mock/gomock"
)

// MockGarmClient is a mock of GarmClient interface.
type MockGarmClient struct {
	ctrl     *gomock.Controller
	recorder *MockGarmClientMockRecorder
}

// MockGarmClientMockRecorder is the mock recorder for MockGarmClient.
type MockGarmClientMockRecorder struct {
	mock *MockGarmClient
}

// NewMockGarmClient creates a new mock instance.
func NewMockGarmClient(ctrl *gomock.Controller) *MockGarmClient {
	mock := &MockGarmClient{ctrl: ctrl}
	mock.recorder = &MockGarmClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGarmClient) EXPECT() *MockGarmClientMockRecorder {
	return m.recorder
}

// GarmAPI mocks base method.
func (m *MockGarmClient) GarmAPI() *client.GarmAPI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GarmAPI")
	ret0, _ := ret[0].(*client.GarmAPI)
	return ret0
}

// GarmAPI indicates an expected call of GarmAPI.
func (mr *MockGarmClientMockRecorder) GarmAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GarmAPI", reflect.TypeOf((*MockGarmClient)(nil).GarmAPI))
}

// Init mocks base method.
func (m *MockGarmClient) Init() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init")
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockGarmClientMockRecorder) Init() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockGarmClient)(nil).Init))
}

// Login mocks base method.
func (m *MockGarmClient) Login() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login")
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockGarmClientMockRecorder) Login() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockGarmClient)(nil).Login))
}

// Token mocks base method.
func (m *MockGarmClient) Token() runtime.ClientAuthInfoWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(runtime.ClientAuthInfoWriter)
	return ret0
}

// Token indicates an expected call of Token.
func (mr *MockGarmClientMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockGarmClient)(nil).Token))
}

// SPDX-License-Identifier: MIT
// Code generated by MockGen. DO NOT EDIT.
// Source: ../credentials.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=credentials.go -source=../credentials.go GithubCredentials
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	credentials "github.com/cloudbase/garm/client/credentials"
	gomock "go.uber.org/mock/gomock"
)

// MockCredentialsClient is a mock of CredentialsClient interface.
type MockCredentialsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialsClientMockRecorder
}

// MockCredentialsClientMockRecorder is the mock recorder for MockCredentialsClient.
type MockCredentialsClientMockRecorder struct {
	mock *MockCredentialsClient
}

// NewMockCredentialsClient creates a new mock instance.
func NewMockCredentialsClient(ctrl *gomock.Controller) *MockCredentialsClient {
	mock := &MockCredentialsClient{ctrl: ctrl}
	mock.recorder = &MockCredentialsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialsClient) EXPECT() *MockCredentialsClientMockRecorder {
	return m.recorder
}

// CreateCredentials mocks base method.
func (m *MockCredentialsClient) CreateCredentials(params *credentials.CreateCredentialsParams) (*credentials.CreateCredentialsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCredentials", params)
	ret0, _ := ret[0].(*credentials.CreateCredentialsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCredentials indicates an expected call of CreateCredentials.
func (mr *MockCredentialsClientMockRecorder) CreateCredentials(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCredentials", reflect.TypeOf((*MockCredentialsClient)(nil).CreateCredentials), params)
}

// DeleteCredentials mocks base method.
func (m *MockCredentialsClient) DeleteCredentials(params *credentials.DeleteCredentialsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCredentials", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCredentials indicates an expected call of DeleteCredentials.
func (mr *MockCredentialsClientMockRecorder) DeleteCredentials(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCredentials", reflect.TypeOf((*MockCredentialsClient)(nil).DeleteCredentials), params)
}

// GetCredentials mocks base method.
func (m *MockCredentialsClient) GetCredentials(params *credentials.GetCredentialsParams) (*credentials.GetCredentialsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", params)
	ret0, _ := ret[0].(*credentials.GetCredentialsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockCredentialsClientMockRecorder) GetCredentials(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockCredentialsClient)(nil).GetCredentials), params)
}

// ListCredentials mocks base method.
func (m *MockCredentialsClient) ListCredentials(params *credentials.ListCredentialsParams) (*credentials.ListCredentialsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCredentials", params)
	ret0, _ := ret[0].(*credentials.ListCredentialsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCredentials indicates an expected call of ListCredentials.
func (mr *MockCredentialsClientMockRecorder) ListCredentials(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCredentials", reflect.TypeOf((*MockCredentialsClient)(nil).ListCredentials), params)
}

// UpdateCredentials mocks base method.
func (m *MockCredentialsClient) UpdateCredentials(params *credentials.UpdateCredentialsParams) (*credentials.UpdateCredentialsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCredentials", params)
	ret0, _ := ret[0].(*credentials.UpdateCredentialsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCredentials indicates an expected call of UpdateCredentials.
func (mr *MockCredentialsClientMockRecorder) UpdateCredentials(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCredentials", reflect.TypeOf((*MockCredentialsClient)(nil).UpdateCredentials), params)
}

// SPDX-License-Identifier: MIT
// Code generated by MockGen. DO NOT EDIT.
// Source: ../endpoint.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=endpoint.go -source=../endpoint.go Endpoint
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	endpoints "github.com/cloudbase/garm/client/endpoints"
	gomock "go.uber.org/mock/gomock"
)

// MockEndpointClient is a mock of EndpointClient interface.
type MockEndpointClient struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointClientMockRecorder
}

// MockEndpointClientMockRecorder is the mock recorder for MockEndpointClient.
type MockEndpointClientMockRecorder struct {
	mock *MockEndpointClient
}

// NewMockEndpointClient creates a new mock instance.
func NewMockEndpointClient(ctrl *gomock.Controller) *MockEndpointClient {
	mock := &MockEndpointClient{ctrl: ctrl}
	mock.recorder = &MockEndpointClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointClient) EXPECT() *MockEndpointClientMockRecorder {
	return m.recorder
}

// CreateEndpoint mocks base method.
func (m *MockEndpointClient) CreateEndpoint(params *endpoints.CreateGithubEndpointParams) (*endpoints.CreateGithubEndpointOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEndpoint", params)
	ret0, _ := ret[0].(*endpoints.CreateGithubEndpointOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEndpoint indicates an expected call of CreateEndpoint.
func (mr *MockEndpointClientMockRecorder) CreateEndpoint(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEndpoint", reflect.TypeOf((*MockEndpointClient)(nil).CreateEndpoint), params)
}

// DeleteEndpoint mocks base method.
func (m *MockEndpointClient) DeleteEndpoint(params *endpoints.DeleteGithubEndpointParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEndpoint", params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEndpoint indicates an expected call of DeleteEndpoint.
func (mr *MockEndpointClientMockRecorder) DeleteEndpoint(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEndpoint", reflect.TypeOf((*MockEndpointClient)(nil).DeleteEndpoint), params)
}

// GetEndpoint mocks base method.
func (m *MockEndpointClient) GetEndpoint(params *endpoints.GetGithubEndpointParams) (*endpoints.GetGithubEndpointOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoint", params)
	ret0, _ := ret[0].(*endpoints.GetGithubEndpointOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoint indicates an expected call of GetEndpoint.
func (mr *MockEndpointClientMockRecorder) GetEndpoint(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoint", reflect.TypeOf((*MockEndpointClient)(nil).GetEndpoint), params)
}

// ListEndpoints mocks base method.
func (m *MockEndpointClient) ListEndpoints(params *endpoints.ListGithubEndpointsParams) (*endpoints.ListGithubEndpointsOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEndpoints", params)
	ret0, _ := ret[0].(*endpoints.ListGithubEndpointsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEndpoints indicates an expected call of ListEndpoints.
func (mr *MockEndpointClientMockRecorder) ListEndpoints(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEndpoints", reflect.TypeOf((*MockEndpointClient)(nil).ListEndpoints), params)
}

// UpdateEndpoint mocks base method.
func (m *MockEndpointClient) UpdateEndpoint(params *endpoints.UpdateGithubEndpointParams) (*endpoints.UpdateGithubEndpointOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoint", params)
	ret0, _ := ret[0].(*endpoints.UpdateGithubEndpointOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEndpoint indicates an expected call of UpdateEndpoint.
func (mr *MockEndpointClientMockRecorder) UpdateEndpoint(params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoint", reflect.TypeOf((*MockEndpointClient)(nil).UpdateEndpoint), params)
}

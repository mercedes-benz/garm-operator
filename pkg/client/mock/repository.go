// SPDX-License-Identifier: MIT
// Code generated by MockGen. DO NOT EDIT.
// Source: ../repository.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=repository.go -source=../repository.go Repository
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	repositories "github.com/cloudbase/garm/client/repositories"
	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryClient is a mock of RepositoryClient interface.
type MockRepositoryClient struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryClientMockRecorder
}

// MockRepositoryClientMockRecorder is the mock recorder for MockRepositoryClient.
type MockRepositoryClientMockRecorder struct {
	mock *MockRepositoryClient
}

// NewMockRepositoryClient creates a new mock instance.
func NewMockRepositoryClient(ctrl *gomock.Controller) *MockRepositoryClient {
	mock := &MockRepositoryClient{ctrl: ctrl}
	mock.recorder = &MockRepositoryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryClient) EXPECT() *MockRepositoryClientMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockRepositoryClient) CreateRepository(param *repositories.CreateRepoParams) (*repositories.CreateRepoOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", param)
	ret0, _ := ret[0].(*repositories.CreateRepoOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockRepositoryClientMockRecorder) CreateRepository(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockRepositoryClient)(nil).CreateRepository), param)
}

// DeleteRepository mocks base method.
func (m *MockRepositoryClient) DeleteRepository(param *repositories.DeleteRepoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", param)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockRepositoryClientMockRecorder) DeleteRepository(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockRepositoryClient)(nil).DeleteRepository), param)
}

// GetRepository mocks base method.
func (m *MockRepositoryClient) GetRepository(param *repositories.GetRepoParams) (*repositories.GetRepoOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepository", param)
	ret0, _ := ret[0].(*repositories.GetRepoOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepository indicates an expected call of GetRepository.
func (mr *MockRepositoryClientMockRecorder) GetRepository(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepository", reflect.TypeOf((*MockRepositoryClient)(nil).GetRepository), param)
}

// ListRepositories mocks base method.
func (m *MockRepositoryClient) ListRepositories(param *repositories.ListReposParams) (*repositories.ListReposOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", param)
	ret0, _ := ret[0].(*repositories.ListReposOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockRepositoryClientMockRecorder) ListRepositories(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockRepositoryClient)(nil).ListRepositories), param)
}

// UpdateRepository mocks base method.
func (m *MockRepositoryClient) UpdateRepository(param *repositories.UpdateRepoParams) (*repositories.UpdateRepoOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepository", param)
	ret0, _ := ret[0].(*repositories.UpdateRepoOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRepository indicates an expected call of UpdateRepository.
func (mr *MockRepositoryClientMockRecorder) UpdateRepository(param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepository", reflect.TypeOf((*MockRepositoryClient)(nil).UpdateRepository), param)
}

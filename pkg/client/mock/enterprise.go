// Code generated by MockGen. DO NOT EDIT.
// Source: ../enterprise.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	params "github.com/cloudbase/garm/params"
	gomock "go.uber.org/mock/gomock"
)

// MockEnterpriseClient is a mock of EnterpriseClient interface.
type MockEnterpriseClient struct {
	ctrl     *gomock.Controller
	recorder *MockEnterpriseClientMockRecorder
}

// MockEnterpriseClientMockRecorder is the mock recorder for MockEnterpriseClient.
type MockEnterpriseClientMockRecorder struct {
	mock *MockEnterpriseClient
}

// NewMockEnterpriseClient creates a new mock instance.
func NewMockEnterpriseClient(ctrl *gomock.Controller) *MockEnterpriseClient {
	mock := &MockEnterpriseClient{ctrl: ctrl}
	mock.recorder = &MockEnterpriseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnterpriseClient) EXPECT() *MockEnterpriseClientMockRecorder {
	return m.recorder
}

// CreateEnterprise mocks base method.
func (m *MockEnterpriseClient) CreateEnterprise(param params.CreateEnterpriseParams) (params.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnterprise", param)
	ret0, _ := ret[0].(params.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnterprise indicates an expected call of CreateEnterprise.
func (mr *MockEnterpriseClientMockRecorder) CreateEnterprise(param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnterprise", reflect.TypeOf((*MockEnterpriseClient)(nil).CreateEnterprise), param)
}

// DeleteEnterprise mocks base method.
func (m *MockEnterpriseClient) DeleteEnterprise(ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnterprise", ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnterprise indicates an expected call of DeleteEnterprise.
func (mr *MockEnterpriseClientMockRecorder) DeleteEnterprise(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnterprise", reflect.TypeOf((*MockEnterpriseClient)(nil).DeleteEnterprise), ID)
}

// GetEnterprise mocks base method.
func (m *MockEnterpriseClient) GetEnterprise(ID string) (params.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnterprise", ID)
	ret0, _ := ret[0].(params.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnterprise indicates an expected call of GetEnterprise.
func (mr *MockEnterpriseClientMockRecorder) GetEnterprise(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnterprise", reflect.TypeOf((*MockEnterpriseClient)(nil).GetEnterprise), ID)
}

// ListEnterprises mocks base method.
func (m *MockEnterpriseClient) ListEnterprises() ([]params.Enterprise, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEnterprises")
	ret0, _ := ret[0].([]params.Enterprise)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEnterprises indicates an expected call of ListEnterprises.
func (mr *MockEnterpriseClientMockRecorder) ListEnterprises() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEnterprises", reflect.TypeOf((*MockEnterpriseClient)(nil).ListEnterprises))
}
